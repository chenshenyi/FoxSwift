---
description: 
globs: 
alwaysApply: true
---
# Code Style Guidelines

## Naming Conventions

### General Rules

- Use meaningful and descriptive names
- Avoid abbreviations (unless they are widely accepted)
- Do not use Hungarian notation

### Specific Guidelines

- Classes/Structs: PascalCase

  ```swift
  struct UserProfile { }
  class NetworkManager { }
  ```

- Protocols: PascalCase, typically ending with -able, -ible, or Protocol

  ```swift
  protocol Downloadable { }
  protocol NetworkProtocol { }
  ```

- Functions/Methods: camelCase, starting with a verb

  ```swift
  func fetchData() { }
  func handleError(_ error: Error) { }
  ```

- Variables/Properties: camelCase

  ```swift
  var userName: String
  let maxRetryCount: Int
  ```

- Enums: PascalCase, with cases in camelCase

  ```swift
  enum NetworkError {
      case connectionTimeout
      case invalidResponse
  }
  ```

## Code Formatting

### Indentation

- Use spaces instead of tabs
- Indentation width of 4 spaces
- Use K&R style for braces (placed on the same line)

### Whitespace and Line Breaks

- Add spaces before and after operators
- Add a space after commas
- No space before colon, space after colon (for type declarations)
- One blank line between functions
- One blank line between logical blocks

## Code Analysis Tools

- Use SwiftLint for code analysis
- Custom rules should be stored in `.swiftlint.yml` at the project root
- Include SwiftLint checks in CI/CD pipeline

## Access Control

### Usage Principles

- Use `internal` by default
- Use `public` for APIs exposed outside the module
- Use `internal` for APIs used within the module
- Use `private` for content used only within the file
- Use `fileprivate` to allow access by subclasses

### Recommendations

- Use the most restrictive access level possible
- Provide complete documentation for public APIs
- Consider using `final` to prevent inheritance

## Documentation Guidelines

- Use DocC style comments
- Provide documentation for all public APIs
- Provide implementation details for complex algorithms
- TODO/FIXME comments should include issue numbers or descriptions

## Best Practices

- Avoid force unwrapping
- Prefer `guard` over nested `if` statements
- Make good use of Swift's type inference
- Use Swift's new features (like async/await)
- Follow SOLID principles
- Keep files under 600 lines
- Keep functions under 80 lines
