---
description: 
globs: 
alwaysApply: true
---
# Error Handling Guidelines

## Error Definition

- All errors must implement the `AppError` protocol
- Errors must include localized descriptions and debug descriptions
- Error messages must include both Chinese and English translations

### Error Structure

```swift
enum AppError: Error, CustomStringConvertible {
    case userFacing(String)
    case internal(Error)
}

enum NetworkError: Error, CustomStringConvertible {
    case connectionFailed(reason: String)
    case invalidResponse(statusCode: Int)
    case timeout(after: TimeInterval)
    
    var localizedDescription: String {
        switch self {
        case let .connectionFailed(reason):
            return "Connection failed: \(reason)"
        case let .invalidResponse(statusCode):
            return "Invalid response: HTTP \(statusCode)"
        case let .timeout(time):
            return "Connection timed out: \(time) seconds"
        }
    }
}
```

## Error Handling Requirements

- Use Swift's try-catch mechanism to handle errors
- Avoid using `try!` unless you can guarantee that an error will never occur
- Use `try?` only in situations where errors can be ignored
- All errors must be logged
- Error messages displayed to users must be localized

```swift
func fetchData() async throws(AppError) -> Data {
    do {
        let data = try await networkClient.fetch()
        Logger.network.info("Data fetched successfully")
        return data
    } catch NetworkError.connectionFailed(let reason) {
        Logger.network.error("Connection failed: \(reason)")
        throw AppError.userFacing("Unable to connect to server: \(reason)")
    } catch NetworkError.timeout {
        Logger.network.error("Connection timeout")
        throw AppError.userFacing("Connection timed out, please try again later")
    } catch {
        Logger.network.fault("Unknown error: \(error)")
        throw AppError.internal(error)
    }
}
```

## Logging Requirements

- Use OSLog for logging
- Categorize logs by functional module
- Do not log sensitive information
- Error logs must include complete error information
- Use appropriate log levels

```swift
import OSLog

private extension Logger {
    enum Category: String {
        case app
        case network
        case database
        case security
    }

    static func getLogger(for category: Category) -> Logger {
        Logger(
            subsystem: Bundle.main.bundleIdentifier!, 
            category: category.rawValue
        )
    }
}

extension Logger {
    /// Application main Logger
    static let app = getLogger(for: .app)
    
    /// Network-related Logger
    static let network = getLogger(for: .network)
    
    /// Database-related Logger
    static let database = getLogger(for: .database)
    
    /// Security-related Logger
    static let security = getLogger(for: .security)
}
```

### Log Level Usage

```swift
// Debug: Debugging information during development
Logger.app.debug("Starting application initialization...")

// Info: General operational information
Logger.network.info("Starting file download: \(url.absoluteString)")

// Notice: Important but non-urgent events
Logger.app.notice("User login successful: \(userID)")

// Warning: Potential problem warnings
Logger.database.warning("Too many database connection retry attempts")

// Error: Error information
Logger.network.error("Network request failed: \(error.localizedDescription)")

// Critical: Severe errors
Logger.security.critical("Unauthorized access attempt detected")

// Fault: System-level errors
Logger.app.fault("Application about to crash: \(fatalError)")
```

## Error Reporting Requirements

- Must record complete information for all errors
- Must include system environment information
- Must include user action history
- Must include relevant logs
- Sensitive information must be masked

```swift
struct ErrorReport {
    let error: Error
    let timestamp: Date
    let deviceInfo: DeviceInfo
    let stackTrace: String
    let userAction: String?
    let logs: [LogEntry]
}

struct DeviceInfo {
    let osVersion: String
    let appVersion: String
    let deviceModel: String
    let locale: String
}
```
