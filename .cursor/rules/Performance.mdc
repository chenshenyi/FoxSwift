---
description: 
globs: 
alwaysApply: true
---
# Performance Guidelines

## Memory Management

### 記憶體使用

- 避免記憶體洩漏
- 適時使用 weak 和 unowned 參考
- 大型物件使用 lazy 載入
- 實作適當的記憶體警告處理

### 資源釋放

- 及時釋放不需要的資源
- 實作 deinit 確保資源清理
- 監控記憶體使用趨勢

## Cache 管理

### Cache 策略

- 實作多層級快取
- 設定適當的快取過期時間
- 實作快取清理機制
- 監控快取命中率

### Cache 實作

- 使用適當的快取儲存方式
- 實作快取大小限制
- 處理快取失效情況
- 實作快取預熱機制

## 大型資料處理

### 分頁處理

- 實作資料分頁機制
- 使用適當的分頁大小
- 實作無限滾動
- 優化分頁載入效能

### 資料結構選擇

- 選擇適當的資料結構
- 避免過度使用高成本操作
- 實作資料索引
- 優化搜尋演算法

## 網路效能

### 請求優化

- 實作請求合併
- 使用適當的序列化格式
- 實作請求快取
- 處理網路狀態變化

### 資料傳輸

- 實作資料壓縮
- 使用適當的傳輸協議
- 優化傳輸封包大小
- 實作斷點續傳

## UI 效能

### 渲染優化

- 避免主線程阻塞
- 使用適當的渲染策略
- 實作 UI 重用機制
- 優化動畫效能

### 響應性

- 保持 UI 響應性
- 實作適當的載入指示
- 處理長時間操作
- 優化手勢處理

## 效能監控

### 監控指標

- CPU 使用率
- 記憶體使用量
- 網路延遲
- 畫面更新率（FPS）
- 啟動時間
- 電池使用量

### 監控工具

- 使用 Instruments 進行分析
- 實作效能日誌
- 設定效能警告閾值
- 定期進行效能檢測

## 最佳實踐

### 程式碼優化

- 避免重複計算
- 使用適當的並行處理
- 實作程式碼效能分析
- 優化迴圈與演算法

### 資源優化

- 優化圖片資源
- 實作資源預載入
- 處理背景工作
- 優化應用程式大小
