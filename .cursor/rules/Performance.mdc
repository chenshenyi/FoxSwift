---
description: 
globs: 
alwaysApply: true
---
# Performance Guidelines

## Memory Management

### Memory Usage

- Avoid memory leaks
- Use weak and unowned references appropriately
- Use lazy loading for large objects
- Implement proper memory warning handling

### Resource Release

- Release unnecessary resources promptly
- Implement deinit to ensure resource cleanup
- Monitor memory usage trends

## Cache Management

### Cache Strategy

- Implement multi-level caching
- Set appropriate cache expiration times
- Implement cache cleaning mechanisms
- Monitor cache hit rates

### Cache Implementation

- Use appropriate cache storage methods
- Implement cache size limits
- Handle cache invalidation scenarios
- Implement cache warming mechanisms

## Large Data Processing

### Pagination

- Implement data pagination mechanisms
- Use appropriate page sizes
- Implement infinite scrolling
- Optimize pagination loading performance

### Data Structure Selection

- Choose appropriate data structures
- Avoid overusing high-cost operations
- Implement data indexing
- Optimize search algorithms

## Network Performance

### Request Optimization

- Implement request batching
- Use appropriate serialization formats
- Implement request caching
- Handle network state changes

### Data Transfer

- Implement data compression
- Use appropriate transport protocols
- Optimize transfer packet size
- Implement resumable transfers

## UI Performance

### Rendering Optimization

- Avoid main thread blocking
- Use appropriate rendering strategies
- Implement UI reuse mechanisms
- Optimize animation performance

### Responsiveness

- Maintain UI responsiveness
- Implement appropriate loading indicators
- Handle long-running operations
- Optimize gesture handling

## Performance Monitoring

### Monitoring Metrics

- CPU usage
- Memory usage
- Network latency
- Frame rate (FPS)
- Launch time
- Battery usage

### Monitoring Tools

- Use Instruments for analysis
- Implement performance logging
- Set performance warning thresholds
- Conduct regular performance testing

## Best Practices

### Code Optimization

- Avoid redundant calculations
- Use appropriate concurrency
- Implement code performance profiling
- Optimize loops and algorithms

### Resource Optimization

- Optimize image resources
- Implement resource preloading
- Handle background tasks
- Optimize application size
