---
description: 
globs: 
alwaysApply: true
---
# FoxSwift Development Guidelines

## 1. Basic Guidelines

### 1.1 Language Usage

- English

### 1.2 Environment Requirements

- Swift version > 6.1
- Xcode version > 15.0
- iOS version > 16.0

### 1.3 Development Principles

- Follow SOLID principles
- Protocol Oriented Programming
- Modular design
- Use Dependency Injection

## 2. Code Guidelines

### 2.1 Architecture Preferences

- Use Swift Package Manager for dependency management
- Each feature should be an independent Swift Package
- Use SwiftUI for interface construction
- Adopt Swift Concurrency for asynchronous operations
- Prefer struct over class

### 2.2 Code Style

- Follow Swift API Design Guidelines
- Leverage Swift 5.9+ new features (such as macros)
- Use property wrappers to reduce repetitive code
- Use typed-throws for error handling
- Use actor model when necessary
- One class per file
- Use folders to properly organize files

### 2.3 Avoid Using

- DispatchQueue
- GCD
- UIKit
- Excessively large functions
- Too many parameters
- Excessively large classes
- Deprecated APIs

## 3. Documentation Guidelines

### 3.1 Markdown Documents

- Use Markdown format
- Use mermaid diagrams when appropriate
- Long documents should be split into multiple smaller files
- Use folders for categorization
- Documents must include at the beginning:

  ```md
  # <FileName>

  > This file is generated by AI, please check the correctness of the content.
  ```

### 3.2 Code Comments

- Use DocC format
- Important protocols and functions should include example code
- Swift files must include at the beginning:

  ```swift
  //  <FileName>.swift
  //  <ProjectName>
  //
  //  Created by <author> on <date>.
  //
  ```

### 3.3 Multilingual Documents

- Documents should be written in English
- Multilingual documents should include Traditional Chinese (Taiwan usage) and English

## 4. Development Process

### 4.1 Implementation Steps

1. Update documentation (focus on functionality direction, details in code comments)
2. Update interface definitions
   - Write comments and protocol/function interfaces
   - Verify compatibility with existing architecture
3. Implement main flow
4. Gradually complete detail implementation
5. Check code differences

### 4.2 Notes

- Architecture adjustments require prior discussion
- Regularly check the accuracy of AI-assisted generated content

## 5. Testing Guidelines

### 5.1 Testing Framework

- Use SwiftTest framework (not XCTest)
- Reference document: [SwiftTest.md](mdc:References/SwiftTest/SwiftTest.md)

### 5.2 Test Types

- Unit tests
- Integration tests
- Use async/await for asynchronous testing
- Use Preview Provider for SwiftUI preview testing
