# FoxSwift 開發規範

## 1. 基礎規範

### 1.1 語言使用

- 文件語言：
  - 繁體中文（使用臺灣用語）
  - 英文
- 專有名詞統一使用英文

### 1.2 環境需求

- Swift 版本 > 6.0
- Xcode 版本 > 15.0
- iOS 版本 > 16.0

### 1.3 開發原則

- 遵循 SOLID 原則
- Protocol Oriented Programming
- 模組化設計
- 使用 Dependency Injection

## 2. 程式碼規範

### 2.1 架構偏好

- 使用 Swift Package Manager 管理相依性
- 每個功能應為獨立的 Swift Package
- 使用 SwiftUI 建構介面
- 採用 Swift Concurrency 處理非同步
- 優先使用 struct 而非 class

### 2.2 程式碼風格

- 遵循 Swift API Design Guidelines
- 善用 Swift 5.9+ 新特性（如 macros）
- 使用 property wrapper 減少重複代碼
- 使用 typed-throws 處理錯誤
- 必要時使用 actor 模型
- 一個 class 一個檔案
- 使用資料夾妥善組織檔案

### 2.3 避免使用

- DispatchQueue
- GCD
- UIKit
- 過大的 function
- 過多的參數
- 過大的 class
- deprecated 的 API

## 3. 文件規範

### 3.1 Markdown 文件

- 使用 Markdown 格式
- 適時使用 mermaid 圖表
- 長文件應拆分為多個小文件
- 使用文件夾分類管理
- 文件開頭必須包含：

  ```md
  # <FileName>

  > This file is generated by AI, please check the correctness of the content.
  ```

### 3.2 程式碼註解

- 使用 DocC 格式
- 重要的 protocol 與 function 需提供範例程式碼
- Swift 檔案開頭必須包含：

  ```swift
  //  <FileName>.swift
  //  <ProjectName>
  //
  //  Created by <author> on <date>.
  //
  ```

### 3.3 多語系文件

- 標準文件使用英文撰寫
- 多語系文件需包含繁體中文（臺灣用語）與英文
- 文件內容使用中英雙語

## 4. 開發流程

### 4.1 實作步驟

1. 更新文件（著重功能方向，細節寫在程式碼註解）
2. 更新介面定義
   - 撰寫註解與 protocol/function 介面
   - 確認與既有架構的相容性
3. 實作主要流程
4. 逐步完成細節實作
5. 檢查程式碼差異

### 4.2 注意事項

- 架構調整需先討論
- 定期檢查 AI 輔助生成的內容正確性

## 5. 測試規範

### 5.1 測試框架

- 使用 SwiftTest 框架（不使用 XCTest）
- 參考文件：[SwiftTest](References/SwiftTest/SwiftTest.md)

### 5.2 測試類型

- 單元測試
- 整合測試
- 使用 async/await 進行非同步測試
- 使用 Preview Provider 進行 SwiftUI 預覽測試
