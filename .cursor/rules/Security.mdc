---
description: 
globs: 
alwaysApply: true
---
# Security Guidelines

## Sensitive Information Handling

### Environment Variables

- Sensitive information must be stored using environment variables
- Development environment should use `.env` files (must be added to `.gitignore`)
- Production environment should use secure environment variable management systems

### API Keys Management

- API Keys must not be hardcoded in the codebase
- Use Configuration files to manage references to API Keys
- API Keys should be rotated regularly
- Different environments should use different API Keys

### Encryption

- Use industry-standard encryption algorithms
- Passwords must use one-way hashing (e.g., bcrypt)
- Sensitive data transmission must use HTTPS
- Encryption keys must be securely managed and rotated regularly

## Data Storage Security

### Local Storage

- Store sensitive data using Keychain
- UserDefaults should only store non-sensitive information
- Sensitive data in the file system must be encrypted
- Clean temporary data regularly

### Database Security

- Database connection information must be encrypted
- Use parameterized queries to prevent SQL injection
- Backup databases regularly
- Implement database access control

## Network Security

### API Security

- Implement API authentication mechanisms
- Use OAuth 2.0 or similar standards
- Implement API request rate limiting
- Validate all input data

### SSL/TLS

- Enforce HTTPS usage
- Use the latest TLS version
- Update SSL certificates regularly
- Implement Certificate Pinning

## User Authentication

### Password Policy

- Enforce strong passwords
- Implement password retry limits
- Provide secure password reset mechanisms
- Require periodic password changes

### Login Security

- Implement multi-factor authentication
- Log login attempts
- Detect anomalous login behavior
- Provide login notification mechanisms
