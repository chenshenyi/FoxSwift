---
description: 
globs: 
alwaysApply: true
---
# Documentation Guidelines

## Document Types

### Project Documents

- README.md
- CONTRIBUTING.md
- CHANGELOG.md
- LICENSE
- API documentation
- Architecture documents
- User manuals
- Development guides

### Code Documents

- File header comments
- Function/method comments
- Class/struct comments
- Protocol comments
- Important algorithm explanations
- Usage examples

## DocC Documentation

### Basic Format

```swift
/// A network request manager
///
/// NetworkManager is responsible for handling all network requests, including:
/// - HTTP/HTTPS requests
/// - WebSocket connections
/// - File uploads/downloads
///
/// ## Topics
/// ### Basic Operations
/// - ``configure``
/// - ``start``
/// - ``stop``
///
/// ### HTTP Requests
/// - ``get(_:)``
/// - ``post(_:data:)``
/// - ``put(_:data:)``
/// - ``delete(_:)``
///
/// ### Examples
/// ```swift
/// let manager = NetworkManager()
/// try await manager.configure()
/// let data = try await manager.get("https://api.example.com/data")
/// ```
public class NetworkManager {
    // Implementation
}
```

### Document Structure

- Brief description
- Detailed explanation
- Parameter descriptions
- Return value descriptions
- Error descriptions
- Example code
- Related topics

## Markdown Documents

### Basic Rules

- Use standard Markdown syntax
- Use appropriate heading levels
- Add table of contents (for large documents)
- Use code blocks
- Add links and references
- Use lists and tables

### Document Example

```markdown
# Project Name

> Brief project description

## Table of Contents
- [Installation](mdc:#installation)
- [Usage](mdc:#usage)
- [API Documentation](mdc:#api-documentation)
- [Contribution Guidelines](mdc:#contribution-guidelines)
- [License](mdc:#license)

## Installation

### System Requirements
- Swift 6.0+
- Xcode 15.0+
- iOS 16.0+

### Installation Steps
1. Clone the project
2. Install dependencies
3. Build the project

## Usage

### Basic Setup

- <Code>

```

## API Documentation

### Format Standards

- Use OpenAPI specification
- Include version information
- Detailed parameter descriptions
- Response format examples
- Error code explanations
- Authentication method descriptions

### Example

```yaml
openapi: 3.0.0
info:
  title: API Name
  version: 1.0.0
paths:
  /users:
    get:
      summary: Get user list
      parameters:
        - name: page
          in: query
          schema:
            type: integer
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
```

## Chart Usage

### Mermaid Charts

```mermaid
sequenceDiagram
    Client->>Server: Request data
    Server->>Database: Query data
    Database-->>Server: Return results
    Server-->>Client: Respond with data
```

### When to Use

- System architecture diagrams
- Flowcharts
- Sequence diagrams
- State diagrams
- Class diagrams
- Component diagrams

## Best Practices

### Document Maintenance

- Regularly update documentation
- Version number correspondence
- Review document changes
- Automated document generation
- Document testing

### Document Organization

- Clear directory structure
- Modular documentation
- Link related documents
- Version control integration
- Search optimization
